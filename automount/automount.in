#!@SHELL@
# -*- shell-script -*-

test x"${1:-}" != x"-n" || set -n

PACKAGE='@PACKAGE@'
PKGSYSCONFDIR="@pkgsysconfdir@"
LOGDIR='@logdir@'
LOGFILE="$LOGDIR/$PACKAGE.log"

#DEBUG=1
#DEBUGENV=1

# trace
slogserv='user'
syslog() { local l="$1"; shift; logger -s -t"$PACKAGE" -p"$slogserv.$l" "$*"; }
debug() { test x"${DEBUG:-}" = x && echo "automount: $*" >&2 || syslog debug "$*"; }
info()  { syslog info "$*"; }
warn()  { syslog warn "$*"; }
error() { syslog err "$*"; }
die() { error "FATAL: $*"; exit 1; }

# these should be redefined in config file
pre_boot() { info "no pre_boot handler defined"; }
post_boot() { info "no post_boot handler defined"; }
pre_add()  { info "no pre_add handler defined"; }
post_add() { info "no post_add handler defined"; }
pre_remove()  { info "no pre_remove handler defined"; }
post_remove() { info "no post_remove handler defined"; }

# am_ismounted DIR
am_ismounted()
{
	local dir1=`readlink -e $1` && test -d "$dir1" \
		|| { error "am_ismounted: invalid dir: '$1'"; return 1; }
	local dir2
	for dir2 in `awk '{print $2}' /etc/mtab`; do
		dir2=`readlink -e "$dir2"` && test -d "$dir2" \
			|| continue
		test "$dir1" != "$dir2" || return 0
	done
	return 1
}

# am_strip [FILE]
am_strip()
{
	local e="s,[\t], ,g;
             s,^[ ]*,,g;
             s,[ ]*$,,g;
             s,[ ]\+, ,g;
             /^$/d;
             /^#/d;"
	test x"${1:-}" = x || exec <"$1"
	sed -e "$e"
}

# am_mntdir UUID
am_mntdir()
{
	local uuid="$1" ent
	ent=`am_strip /etc/fstab | grep "^UUID=${1} "` \
		&& { echo "$ent" | awk '{print $2}'; return 0; } \
		|| return 1
}

# am_mount MOUNT-OPTIONS...
am_mount()
{
	info "mount $*"
	mount "${@}" \
		|| { error "mount failed ($?)"; return 1; }
}

# am_umount UMOUNT-OPTIONS
am_umount()
{
	info "umount $*"
	umount "${@}" \
		|| { error "umount failed ($?)"; return 1; }
}

# proc_boot
proc_boot()
{
	for CONFIGFILE in "$PKGSYSCONFDIR"/*.conf; do		
		info "boot: '$CONFIGFILE'"
		( _boot; ) \
			|| error "boot script failed: '$CONFIGFILE'"
	done
}

# _boot
_boot()
{
	ID_FS_UUID=`basename "$CONFIGFILE" .conf`
	AM_MNTDIR=`am_mntdir "$ID_FS_UUID"` \
		|| { error "could not find '$ID_FS_UUID' in fstab"; return 1; }
	DEVNAME="`readlink -e /dev/disk/by-uuid/$ID_FS_UUID`" \
		&& test -e "$DEVNAME" || DEVNAME=
	. "$CONFIGFILE" \
		|| { error "error in config file: '$CONFIGFILE'"; exit 1; }
	pre_boot
	test x"$DEVNAME" = x || am_mount "$DEVNAME"
	post_boot
}

# proc_add
proc_add()
{
	local fsck
	# pre-mount handler
	pre_add
	# just in case, try to unmount any ghost left behind
	while am_ismounted "$AM_MNTDIR"; do
		am_umount -lf "$AM_MNTDIR" || break
	done
	# fsck
	if fsck="`which fsck.$ID_FS_TYPE`" && test -x "$fsck"; then
		local cmd="$fsck -p $DEVNAME"
		info "$cmd"
		eval "$cmd" || die "fsck failed!"
	else
		error "not fsck found for '$ID_FS_TYPE'"
	fi
	# mount
	am_mount "$AM_MNTDIR"
	# post-mount handler
	post_add
}

# proc_remove
proc_remove()
{
	pre_remove
	while am_ismounted "$AM_MNTDIR"; do
		am_umount -lf "$AM_MNTDIR" || break
	done
	post_remove
}
 
# main
main()
{
	# create the logdir and make sure it is writable
	test -d "$LOGDIR" || mkdir -p "$LOGDIR" \
		|| error "could not create LOGDIR: '$LOGDIR'"
	touch "$LOGFILE" || error "LOGFILE is not writable: '$LOGFILE'"
	exec >>"$LOGFILE" 2>&1
	# hello
	for I in `seq 1 70`; do echo -n '#'; done; echo
	debug "`date` ($@)"
	test x"${DEBUGENV:-}" = x \
		|| env | sort -t= -k1
	# boot
	test x"$ACTION" != x"boot" || {
		proc_boot;
		exit $?; }
	# make the model name
	MODEL="$ID_VENDOR $ID_MODEL (`expr ${UDISKS_PARTITION_SIZE:-0} / 1048576`Mb)"
	info "$ACTION: $MODEL (dev='$DEVNAME', type='$DEVTYPE', fstype='$ID_FS_TYPE', label='$ID_FS_LABEL', uuid='$ID_FS_UUID')"
	# check if we are concerned by this device
	CONFIGFILE="$PKGSYSCONFDIR/$ID_FS_UUID.conf"
	if [ x"$ACTION" != x"add" -a x"$ACTION" != x"remove" ]; then
		info "$DEVNAME ignored: unknown action ($ACTION)"
		exit 0
	elif [ x"$DEVTYPE" != x"partition" ]; then
		info "$DEVNAME ignored: not a partition ($DEVTYPE)"
		exit 0
	elif ! [ -e "$CONFIGFILE" ]; then
		info "$DEVNAME ignored: not configured ($CONFIGFILE not found)"
		exit 0
	fi
	# find the mount point
	AM_MNTDIR_="`am_mntdir $ID_FS_UUID`" \
		|| { error "could not find UUID '$ID_FS_UUID' in fstab"; return 1; }
	AM_MNTDIR=`readlink -e "$AM_MNTDIR_"` && test -d "$AM_MNTDIR" \
		|| { error "mount point is not a directory: '$AM_MNTDIR_'"; return 1; }
	# read the config file
	. "$CONFIGFILE" \
		|| { error "error in config file: '$CONFIGFILE'"; exit 1; }
	# go
	case "$ACTION" in
		add) proc_add;;
		remove) proc_remove;;
		*) die "? ACTION='$ACTION'";;
	esac
	# ok
	info "all done!"
}

# exec
main "${@}"
